生鲜商城项目：
用户注册登录模块、首页及商品信息模块、购物车模块、订单模块
django+redis+celery+haystack+nginx+uwsgi
前端代码和图片直接用的是传智播客的资料。有部分修改


用户注册登录模块：

注册界面register.html、登录界面login.html、用户信息中心界面user_center_info.html、用户收货地址修改界面user_center_site.html

前端界面分析：
注册和登录界面，继承自base_foot.html模板。
用户信息和地址修改界面，继承自base_user_center.html模板。

数据模型创建：
自建用户登录模型：UserInfo
用户地址模型：AddressInfo
自定义模型管理器，UserManager、AddressManager

views逻辑：该界面如果有数据需要提交写入数据库，就写类、包括get和post方法。如果只是单纯需要渲染界面，就只写方法
分别写了三个视图类，RegisterView、LoginView、SiteView。视图类中都写了get和post方法，get方法用户用户获取界面时，post是用户提交数据时处理数据写入数据库使用。
Logout方法用于用户注销、Info方法用户获取用户信息界面以及用户信息数据、

要点：
1、在用户注册时，会发送激活邮件，激活邮件是利用celery异步发送。发送方法写在celery_task/tasks中，调用了django的send_mail方法，在views中调用。
2、登录时会保存cookies和session，session保存在redis中。需要在settings中添加配置。
3、在用户信息和地址界面，均要展现购物车。购物车记录这里是保存在redis中，上一个版本是写入了数据库。每次渲染页面的时候会从缓存中读取购物车中商品数量并返回。
3、用户信息界面和收货地址界面都需要验证用户是否登录才能进入，我是写了装饰器来判断。在执行views中的如Info方法时，先执行装饰器函数auth，判断当前是否存在session即是否已登录，同时通过request获取要访问的url之后可以自动跳转。


首页及商品信息模块

前端界面：
商城首页界面index.html、商品列表界面list.html，商品详情界面detail.html。继承自base.html模板

数据模型创建：
商品种类模型：GoodsType
商品信息模型：GoodsSKU
首页展示商品模型：IndexGoodsBanner
首页分类商品展示模型：IndexTypeGoodsBanner
首页促销商品展示模型：IndexPromotionBanner

views逻辑：
index、list、detail都是只需要渲染页面传递数据回前端即可，就只写了方法。

要点：
1、list界面涉及到商品列表分页和按照不同规则排序。固定接收两个参数分别是商品类型id和页码page。还有一个参数是sort即排序规则。sort参数是在html中url地址里调用list方法时，形如{% url "name:url" %}?sort=price。
2、商品列表分页，使用django的Paginator模块。
3、商品详情页，需要向缓存中添加用户浏览记录。前端界面中利用ajax同步更新购物车，还要写前端代码让用户进行商品数量的加减等操作。
4、全文搜索引擎，利用了haystack+whoosh模块进行全文搜索，jieba进行中文分词。新建search.html界面展示搜索结果。
5、celery写了缓存生成静态首页的方法，nginx调用。在每次访问index时，先判断是否有网页缓存，有的话先返回缓存，这样就减少了频繁渲染index，节省了开支。没有就设置缓存。

购物车模块

前端界面：
购物车界面cart.html

models创建：
主要是保存在redis缓存中，其实最好保存在数据库中。用的是redis的Hash数据类型、{id:num}

views：
cart、add、edit、delete四个方法，主要是对购物车界面的数据进行修改。
用户在这个界面可以对数据做任意修改，需要前端写这个加减逻辑，后端返回的是购物车数据，并且在后端结算了总金额总数量等数据，在前端用js也可以计算。

要点：
前端需要写jquery修改商品数量等操作，还需要ajax同步更新总金额总数量、购物车数据等。

订单模块：

前端界面：
订单界面place_order.html

数据模型models：
订单信息模型类：OrderInfo
订单商品模型类：OrderGoods

views逻辑：
order方法用于渲染返回订单界面、commmit方法用于提交订单，订单表中生成记录

要点：
1、这里用了mysql的乐观锁处理订单并发，即在提交时，检测现在的库存与初始读取库存是否相同，如果不同说明有并发就回滚，重新尝试。如果没有就正常提交。@transaction.atomic装饰器装饰commit方法，在写入数据之前设置保存点，写入数据时进行检测，如果有并发即异常库存值出现，就回滚。
2、前端仍然需要ajax进行数据的提交。